{"version":3,"sources":["components/Header/Header.js","components/CheckUser/CheckUser.js","page/Home/Home.js","components/UserForm/UserForm.js","page/Signup/Signup.js","page/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["header","className","to","CheckUser","state","hasToken","isLogin","checkLogin","loginToken","localStorage","getItem","email","axios","post","headers","then","response","data","setState","catch","error","console","log","componentDidMount","content","this","props","contentReverse","children","Component","withRouter","Home","UserForm","name","password","errorMsg","handleSubmit","event","preventDefault","target","value","formData","FormData","append","apiUrl","exeApiSucess","errorText","errors","pageTitle","history","push","setItem","getNameParts","type","onSubmit","action","method","rel","form","Signup","Login","setToken","token","exeLoginSucess","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6VAqBeA,G,YAfA,WACb,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,eACb,kBAAC,IAAD,CACEC,GAAG,KADL,QAGA,kBAAC,IAAD,CACEA,GAAG,WADL,c,yBCRFC,E,4MAEJC,MAAQ,CACNC,UAAU,EACVC,SAAS,G,EAGXC,WAAa,WAEX,IAAMC,EAAaC,aAAaC,QAAQ,cAClCC,EAAQF,aAAaC,QAAQ,SAEhB,OAAfF,GAEFI,IACGC,KAAK,kBAAmB,CACvB,WAAcL,EACd,MAASG,GAEX,CACEG,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,IAEkB,IAAlBA,EAASC,KACX,EAAKC,SAAS,CAAEZ,SAAS,IAEzB,EAAKY,SAAS,CAAEZ,SAAS,OAI5Ba,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,EAMpBG,kBAAoB,WAClB,EAAKhB,c,uDAKL,IAAIiB,EAOJ,OALIC,KAAKrB,MAAME,UAAYmB,KAAKC,MAAMC,iBACpCH,EAAUC,KAAKC,MAAME,UAKrB,6BAAMJ,O,GAtDYK,aA4DTC,cAAW3B,GC3BX4B,E,uKA1BX,OACE,yBAAK9B,UAAU,QACb,yBAAKA,UAAU,mBACb,2CACA,uJAEA,kBAAC,EAAD,CAAW0B,gBAAgB,GACzB,kBAAC,IAAD,CACE1B,UAAU,aACVC,GAAG,UAFL,4BAIA,iDACA,kBAAC,IAAD,CACED,UAAU,aACVC,GAAG,WAFL,4DAOJ,kBAAC,EAAD,W,GAtBW2B,a,QCHbG,G,kNAEJ5B,MAAQ,CACNO,MAAO,GACPsB,KAAM,GACNC,SAAU,GACVC,SAAU,CACRxB,MAAO,GACPsB,KAAM,GACNC,SAAU,K,EAIdE,aAAe,SAACC,GACdA,EAAMC,iBAEN,EAAKpB,SAAS,CAAEP,MAAO0B,EAAME,OAAO5B,MAAM6B,QAE1C,IAAMC,EAAW,IAAIC,SAErBD,EAASE,OAAO,QAASN,EAAME,OAAO5B,MAAM6B,OAC5CC,EAASE,OAAO,OAAQN,EAAME,OAAON,KAAKO,OAC1CC,EAASE,OAAO,WAAYN,EAAME,OAAOL,SAASM,OAElD5B,IACGC,KAAK,EAAKa,MAAMkB,OAAQH,EAAU,CACjC3B,QAAS,CACP,eAAgB,yBAGnBC,MAAK,SAAAC,GACJK,QAAQC,IAAIN,GACZ,EAAK6B,aAAa7B,MAEnBG,OAAM,SAAAC,GAEL,IAAM0B,EAAY1B,EAAMJ,SAASC,KAAK8B,OAElCZ,EAAQ,eAAQ,EAAK/B,MAAM+B,UAE3BW,EAAUnC,QACZwB,EAASxB,MAAQmC,EAAUnC,OAEzBmC,EAAUb,OACZE,EAASF,KAAOa,EAAUb,MAExBa,EAAUZ,WACZC,EAASD,SAAWY,EAAUZ,UAGhC,EAAKhB,SAAS,CAAEiB,SAAUA,Q,EAIhCU,aAAe,SAAC7B,GACe,WAAzB,EAAKU,MAAMsB,WACb,EAAKtB,MAAMuB,QAAQC,KAAK,KAGG,UAAzB,EAAKxB,MAAMsB,YACbvC,aAAa0C,QAAQ,aAAcnC,EAASC,MAC5CR,aAAa0C,QAAQ,QAAS,EAAK/C,MAAMO,OAEzC,EAAKe,MAAMuB,QAAQC,KAAK,O,EAI5BE,aAAe,WACb,GAA6B,WAAzB,EAAK1B,MAAMsB,UACb,OACE,yBAAK/C,UAAU,iBACb,2BAAOA,UAAU,mBAAjB,aACA,2BAAOA,UAAU,kBAAkBoD,KAAK,OAAOpB,KAAK,SACpD,0BAAMhC,UAAU,mBAAmB,EAAKG,MAAM+B,SAASF,Q,uDAQ7D,OACE,yBAAKhC,UAAU,YACb,wBAAIA,UAAU,iBAAiBwB,KAAKC,MAAMsB,WAE1C,0BACEM,SAAU7B,KAAKW,aACfmB,OAAO,GACPC,OAAO,OACPvD,UAAU,iBACVgC,KAAK,aACLwB,IAAKhC,KAAKiC,MAEV,yBAAKzD,UAAU,iBACb,2BAAOA,UAAU,mBAAjB,SACA,2BAAOA,UAAU,kBAAkBoD,KAAK,QAAQpB,KAAK,UACrD,0BAAMhC,UAAU,mBAAmBwB,KAAKrB,MAAM+B,SAASxB,QAGxDc,KAAK2B,eAEN,yBAAKnD,UAAU,iBACb,2BAAOA,UAAU,mBAAjB,YACA,2BAAOA,UAAU,kBAAkBoD,KAAK,WAAWpB,KAAK,aACxD,0BAAMhC,UAAU,mBAAmBwB,KAAKrB,MAAM+B,SAASD,WAEzD,yBAAKjC,UAAU,iBACb,4BACEoD,KAAK,SACLpD,UAAU,oBAFZ,iB,GA3GW4B,cAwHRC,cAAWE,GCxHpB2B,E,uKAGF,OAEE,kBAAC,EAAD,CAAUX,UAAU,SAASJ,OAAO,oB,GALrBf,aAYNC,cAAW6B,GCbpBC,E,4MAEJxD,MAAQ,CACNI,WAAY,I,EAGdqD,SAAW,SAACC,GAEVzC,QAAQC,IAAIwC,EAAM7C,KAAM,O,EAG1B8C,eAAiB,WACf1C,QAAQC,IAAI,Y,uDAGJ,IAAD,OACP,OAEE,kBAAC,EAAD,CAAU0B,UAAU,QAAQJ,OAAO,aACjCmB,eAAgB,kBAAM,EAAKA,wB,GAnBflC,aA0BLC,cAAW8B,GCEXI,E,uKAnBH,IAAD,OACP,OAEE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,UAAUC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWP,EAAOC,SAAU,SAACC,GAAD,OAAW,EAAKD,SAASC,a,GAXpEjC,aCAEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEd/D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+D,c","file":"static/js/main.1cc2022f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nimport './Header.scss';\n\nconst header = () => {\n  return (\n    <header className=\"Header\">\n      <nav className=\"Header__nav\">\n        <Link\n          to=\"/\"\n        >Home</Link>\n        <Link\n          to=\"/signup\"\n        >signup</Link>\n      </nav>      \n    </header>\n  );\n}\n\nexport default header;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\n\nclass CheckUser extends Component {\n\n  state = {\n    hasToken: false,\n    isLogin: false\n  }\n\n  checkLogin = () => {\n\n    const loginToken = localStorage.getItem('loginToken');\n    const email = localStorage.getItem('email');\n\n    if (loginToken !== null) {\n\n      axios\n        .post('/api/user/check', {\n          'loginToken': loginToken,\n          'email': email\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        })\n        .then(response => {\n\n          if (response.data === true) {\n            this.setState({ isLogin: true });\n          } else {\n            this.setState({ isLogin: false });\n          }\n          \n        })\n        .catch(error => {\n          console.log(error);\n        })\n\n    }\n  }\n\n  componentDidMount = () => {\n    this.checkLogin();\n  }\n\n  render() {\n\n    let content;\n\n    if (this.state.isLogin && !this.props.contentReverse) {\n      content = this.props.children;\n    }\n\n\n    return (\n      <div>{content}</div>\n    )\n  }\n\n}\n\nexport default withRouter(CheckUser);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\n// import InputTweet from '../../components/InputTweet/InputTweet';\n// import TweetList from '../../components/TweetList/TweetList';\nimport CheckUser from '../../components/CheckUser/CheckUser';\n\nclass Home extends Component {\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"Home__container\">\n          <h1>nyanstagram</h1>\n          <p>登録して友達の写真や動画をチェックしよう</p>\n\n          <CheckUser contentReverse={true}>\n            <Link\n              className=\"Home__link\"\n              to=\"/login\"\n            >ログイン</Link>\n            <p>または</p>\n            <Link\n              className=\"Home__link\"\n              to=\"/signup\"\n            >メールドレスで登録</Link>\n          </CheckUser>\n\n        </div>\n        <CheckUser />\n      </div>\n    )\n  }\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nimport './UserForm.scss';\n\nclass UserForm extends Component {\n\n  state = {\n    email: '',\n    name: '',\n    password: '',\n    errorMsg: {\n      email: '',\n      name: '',\n      password: '',\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.setState({ email: event.target.email.value });\n\n    const formData = new FormData();\n\n    formData.append('email', event.target.email.value);\n    formData.append('name', event.target.name.value);\n    formData.append('password', event.target.password.value);\n\n    axios\n      .post(this.props.apiUrl, formData, {\n        headers: {\n          'content-type': 'multipart/form-data'\n        }\n      })\n      .then(response => {\n        console.log(response);\n        this.exeApiSucess(response);\n      })\n      .catch(error => {\n\n        const errorText = error.response.data.errors;\n\n        let errorMsg = { ...this.state.errorMsg };\n\n        if (errorText.email) {\n          errorMsg.email = errorText.email;\n        }\n        if (errorText.name) {\n          errorMsg.name = errorText.name;\n        }\n        if (errorText.password) {\n          errorMsg.password = errorText.password;\n        }\n\n        this.setState({ errorMsg: errorMsg });\n      });\n  }\n\n  exeApiSucess = (response) => {\n    if (this.props.pageTitle === 'signup') {\n      this.props.history.push('/');\n    }\n\n    if (this.props.pageTitle === 'login') {\n      localStorage.setItem('loginToken', response.data);\n      localStorage.setItem('email', this.state.email);\n      // console.log(response.data);\n      this.props.history.push('/');\n    }\n  }\n\n  getNameParts = () => {\n    if (this.props.pageTitle === 'signup') {\n      return (\n        <div className=\"UserForm__row\">\n          <label className=\"UserForm__label\">user-name</label>\n          <input className=\"UserForm__input\" type=\"text\" name=\"name\" />\n          <span className=\"UserForm__error\">{this.state.errorMsg.name}</span>\n        </div>\n      );\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"UserForm\">\n        <h2 className=\"UserForm__ttl\">{this.props.pageTitle}</h2>\n\n        <form\n          onSubmit={this.handleSubmit}\n          action=\"\"\n          method=\"post\"\n          className=\"UserForm__form\"\n          name=\"signupForm\"\n          rel={this.form}\n        >\n          <div className=\"UserForm__row\">\n            <label className=\"UserForm__label\">email</label>\n            <input className=\"UserForm__input\" type=\"email\" name=\"email\" />\n            <span className=\"UserForm__error\">{this.state.errorMsg.email}</span>\n          </div>\n\n          {this.getNameParts()}\n          \n          <div className=\"UserForm__row\">\n            <label className=\"UserForm__label\">password</label>\n            <input className=\"UserForm__input\" type=\"password\" name=\"password\" />\n            <span className=\"UserForm__error\">{this.state.errorMsg.password}</span>\n          </div>\n          <div className=\"UserForm__row\">\n            <button\n              type=\"submit\"\n              className=\"UserForm__button\"\n            >submit</button>\n          </div>\n        </form>\n\n      </div>\n    )\n  }\n\n}\n\nexport default withRouter(UserForm);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport UserForm from '../../components/UserForm/UserForm';\n\n\nclass Signup extends Component {\n\n  render() {\n    return (\n\n      <UserForm pageTitle=\"signup\" apiUrl=\"/api/signup\" />\n\n    )\n  }\n\n}\n\nexport default withRouter(Signup);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport UserForm from '../../components/UserForm/UserForm';\n\nclass Login extends Component {\n\n  state = {\n    loginToken: ''\n  }\n\n  setToken = (token) => {\n    // this.setState({ loginToken: token });\n    console.log(token.data, 'ok');\n  }\n\n  exeLoginSucess = () => {\n    console.log('success');\n  }\n\n  render() {\n    return (\n\n      <UserForm pageTitle=\"login\" apiUrl=\"/api/login\"\n        exeLoginSucess={() => this.exeLoginSucess()} />\n\n    )\n  }\n\n}\n\nexport default withRouter(Login);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.scss';\n\nimport Header from './components/Header/Header';\n\n// page\nimport Home from './page/Home/Home';\nimport Signup from './page/Signup/Signup';\nimport Login from './page/Login/Login';\n\nclass App extends Component {\n\n  render() {\n    return (\n\n      <BrowserRouter>\n        <div>\n          <Header />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/signup' component={Signup} />\n            <Route path='/login' component={Login} setToken={(token) => this.setToken(token)} />\n          </Switch>\n\n        </div>\n      </BrowserRouter>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}