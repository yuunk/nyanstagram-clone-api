{"version":3,"sources":["components/CheckUser/CheckUser.js","components/Header/Header.js","components/Modal/Modal.js","page/Home/Home.js","components/UserForm/UserForm.js","page/Signup/Signup.js","page/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["CheckUser","state","hasToken","isLogin","checkLogin","loginToken","localStorage","getItem","email","axios","post","headers","then","response","data","setState","catch","error","console","log","componentDidMount","content","this","props","contentReverse","contentLogin","children","Fragment","Component","withRouter","Header","loginNav","to","onClick","show","type","updateModal","className","Modal","logout","clear","history","push","modalStyle","Home","UserForm","name","password","errorMsg","handleSubmit","event","preventDefault","target","value","formData","FormData","append","apiUrl","exeApiSucess","errorText","errors","pageTitle","setItem","getNameParts","onSubmit","action","method","rel","form","Signup","Login","setToken","token","exeLoginSucess","App","modal","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0YAKMA,E,4MAEJC,MAAQ,CACNC,UAAU,EACVC,SAAS,G,EAGXC,WAAa,WAEX,IAAMC,EAAaC,aAAaC,QAAQ,cAClCC,EAAQF,aAAaC,QAAQ,SAEhB,OAAfF,GAEFI,IACGC,KAAK,kBAAmB,CACvB,WAAcL,EACd,MAASG,GAEX,CACEG,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,IAEkB,IAAlBA,EAASC,KACX,EAAKC,SAAS,CAAEZ,SAAS,IAEzB,EAAKY,SAAS,CAAEZ,SAAS,OAI5Ba,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,EAMpBG,kBAAoB,WAClB,EAAKhB,c,uDAKL,IAAIiB,EAUJ,OARIC,KAAKrB,MAAME,UAAYmB,KAAKC,MAAMC,iBACpCH,EAAUC,KAAKC,MAAME,cAGlBH,KAAKrB,MAAME,UACdkB,EAAUC,KAAKC,MAAMG,UAIrB,kBAAC,IAAMC,SAAP,KACGN,O,GA1DeO,aAiETC,cAAW7B,GC7BX8B,G,kNAhCbC,SAAW,WACT,OACE,kBAAC,IAAMJ,SAAP,KACE,kBAAC,IAAD,CACEK,GAAG,KADL,QAGA,uBAAGC,QAAS,SAACC,EAAMC,GAAP,OAAgB,EAAKZ,MAAMa,aAAY,EAAM,YAAzD,Y,uDAMJ,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,eACb,kBAAC,EAAD,CACEZ,aAAcH,KAAKS,WACnBP,gBAAgB,GAEhB,kBAAC,IAAD,CACEQ,GAAG,KADL,QAGA,kBAAC,IAAD,CACEA,GAAG,WADL,iB,GAxBSJ,cCDfU,G,kNAEJC,OAAS,WACP,IAAM/B,EAAQF,aAAaC,QAAQ,SAEnCE,IACGC,KAAK,mBAAoB,CACxB,MAASF,GAET,CACEG,QAAS,CACP,eAAgB,sBAGrBC,MAAK,SAAAC,GACJ,EAAKU,MAAMa,aAAY,EAAO,IAC9B9B,aAAakC,QACb,EAAKjB,MAAMkB,QAAQC,KAAK,QAEzB1B,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,uDAIR,IAAD,OAEH0B,EAAa,QAMjB,OAJwB,IAApBrB,KAAKC,MAAMW,OACbS,GAAc,SAId,yBAAKN,UAAWM,GACd,yBAAKN,UAAU,cAAf,0DACA,4BAAQJ,QAAS,kBAAM,EAAKM,WAA5B,OACA,4BAAQN,QAAS,SAACC,EAAMC,GAAP,OAAgB,EAAKZ,MAAMa,aAAY,EAAO,YAA/D,W,GApCYR,cA2CLC,cAAWS,GCVXM,G,6KA1BX,OACE,yBAAKP,UAAU,QACb,yBAAKA,UAAU,mBACb,2CACA,uJAEA,kBAAC,EAAD,CAAWb,gBAAgB,GACzB,kBAAC,IAAD,CACEa,UAAU,aACVL,GAAG,UAFL,4BAIA,iDACA,kBAAC,IAAD,CACEK,UAAU,aACVL,GAAG,WAFL,4DAOJ,kBAAC,EAAD,W,GAvBWJ,c,QCHbiB,G,kNAEJ5C,MAAQ,CACNO,MAAO,GACPsC,KAAM,GACNC,SAAU,GACVC,SAAU,CACRxC,MAAO,GACPsC,KAAM,GACNC,SAAU,K,EAIdE,aAAe,SAACC,GACdA,EAAMC,iBAEN,EAAKpC,SAAS,CAAEP,MAAO0C,EAAME,OAAO5C,MAAM6C,QAE1C,IAAMC,EAAW,IAAIC,SAErBD,EAASE,OAAO,QAASN,EAAME,OAAO5C,MAAM6C,OAC5CC,EAASE,OAAO,OAAQN,EAAME,OAAON,KAAKO,OAC1CC,EAASE,OAAO,WAAYN,EAAME,OAAOL,SAASM,OAElD5C,IACGC,KAAK,EAAKa,MAAMkC,OAAQH,EAAU,CACjC3C,QAAS,CACP,eAAgB,yBAGnBC,MAAK,SAAAC,GACJK,QAAQC,IAAIN,GACZ,EAAK6C,aAAa7C,MAEnBG,OAAM,SAAAC,GAEL,IAAM0C,EAAY1C,EAAMJ,SAASC,KAAK8C,OAElCZ,EAAQ,eAAQ,EAAK/C,MAAM+C,UAE3BW,EAAUnD,QACZwC,EAASxC,MAAQmD,EAAUnD,OAEzBmD,EAAUb,OACZE,EAASF,KAAOa,EAAUb,MAExBa,EAAUZ,WACZC,EAASD,SAAWY,EAAUZ,UAGhC,EAAKhC,SAAS,CAAEiC,SAAUA,Q,EAIhCU,aAAe,SAAC7C,GACe,WAAzB,EAAKU,MAAMsC,WACb,EAAKtC,MAAMkB,QAAQC,KAAK,KAGG,UAAzB,EAAKnB,MAAMsC,YACbvD,aAAawD,QAAQ,aAAcjD,EAASC,MAC5CR,aAAawD,QAAQ,QAAS,EAAK7D,MAAMO,OAEzC,EAAKe,MAAMkB,QAAQC,KAAK,O,EAI5BqB,aAAe,WACb,GAA6B,WAAzB,EAAKxC,MAAMsC,UACb,OACE,yBAAKxB,UAAU,iBACb,2BAAOA,UAAU,mBAAjB,aACA,2BAAOA,UAAU,kBAAkBF,KAAK,OAAOW,KAAK,SACpD,0BAAMT,UAAU,mBAAmB,EAAKpC,MAAM+C,SAASF,Q,uDAQ7D,OACE,yBAAKT,UAAU,YACb,wBAAIA,UAAU,iBAAiBf,KAAKC,MAAMsC,WAE1C,0BACEG,SAAU1C,KAAK2B,aACfgB,OAAO,GACPC,OAAO,OACP7B,UAAU,iBACVS,KAAK,aACLqB,IAAK7C,KAAK8C,MAEV,yBAAK/B,UAAU,iBACb,2BAAOA,UAAU,mBAAjB,SACA,2BAAOA,UAAU,kBAAkBF,KAAK,QAAQW,KAAK,UACrD,0BAAMT,UAAU,mBAAmBf,KAAKrB,MAAM+C,SAASxC,QAGxDc,KAAKyC,eAEN,yBAAK1B,UAAU,iBACb,2BAAOA,UAAU,mBAAjB,YACA,2BAAOA,UAAU,kBAAkBF,KAAK,WAAWW,KAAK,aACxD,0BAAMT,UAAU,mBAAmBf,KAAKrB,MAAM+C,SAASD,WAEzD,yBAAKV,UAAU,iBACb,4BACEF,KAAK,SACLE,UAAU,oBAFZ,iB,GA3GWT,cAwHRC,cAAWgB,GCxHpBwB,E,uKAGF,OAEE,kBAAC,EAAD,CAAUR,UAAU,SAASJ,OAAO,oB,GALrB7B,aAYNC,cAAWwC,GCbpBC,E,4MAEJrE,MAAQ,CACNI,WAAY,I,EAGdkE,SAAW,SAACC,GAEVtD,QAAQC,IAAIqD,EAAM1D,KAAM,O,EAG1B2D,eAAiB,WACfvD,QAAQC,IAAI,Y,uDAGJ,IAAD,OACP,OAEE,kBAAC,EAAD,CAAU0C,UAAU,QAAQJ,OAAO,aACjCgB,eAAgB,kBAAM,EAAKA,wB,GAnBf7C,aA0BLC,cAAWyC,GCwBXI,E,4MAxCbzE,MAAQ,CACN0E,MAAO,CACLzC,MAAM,EACNC,KAAM,K,EAIVC,YAAc,SAACF,EAAMC,GACnB,EAAKpB,SAAS,CACZ4D,MAAO,CACLzC,KAAMA,EACNC,KAAMA,KAGVjB,QAAQC,IAAI,O,uDAGJ,IAAD,OACP,OAEE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,CACEe,KAAMZ,KAAKrB,MAAM0E,MAAMzC,KACvBC,KAAMb,KAAKrB,MAAM0E,MAAMxC,KACvBC,YAAa,SAACF,EAAMC,GAAP,OAAgB,EAAKC,YAAYF,EAAMC,MAEtD,kBAAC,EAAD,CAAQC,YAAa,SAACF,EAAMC,GAAP,OAAgB,EAAKC,YAAYF,EAAMC,MAC5D,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,kBAAC,IAAD,CAAOiC,KAAK,UAAUC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWR,EAAOC,SAAU,SAACC,GAAD,OAAW,EAAKD,SAASC,a,GAjCpE5C,aCDEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/E,MAAK,SAAAgF,GACJA,EAAaC,gBAEd7E,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6E,c","file":"static/js/main.d1ef6082.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\n\nclass CheckUser extends Component {\n\n  state = {\n    hasToken: false,\n    isLogin: false\n  }\n\n  checkLogin = () => {\n\n    const loginToken = localStorage.getItem('loginToken');\n    const email = localStorage.getItem('email');\n\n    if (loginToken !== null) {\n\n      axios\n        .post('/api/user/check', {\n          'loginToken': loginToken,\n          'email': email\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        })\n        .then(response => {\n\n          if (response.data === true) {\n            this.setState({ isLogin: true });\n          } else {\n            this.setState({ isLogin: false });\n          }\n\n        })\n        .catch(error => {\n          console.log(error);\n        })\n\n    }\n  }\n\n  componentDidMount = () => {\n    this.checkLogin();\n  }\n\n  render() {\n\n    let content;\n\n    if (this.state.isLogin && !this.props.contentReverse) {\n      content = this.props.contentLogin;\n    }\n\n    if (!this.state.isLogin) {\n      content = this.props.children;\n    }\n\n    return (\n      <React.Fragment>\n        {content}\n      </React.Fragment>\n    )\n  }\n\n}\n\nexport default withRouter(CheckUser);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport CheckUser from '../CheckUser/CheckUser';\n\nimport './Header.scss';\n\nclass Header extends Component {\n\n  loginNav = () => {\n    return (\n      <React.Fragment>\n        <Link\n          to=\"/\"\n        >Home</Link>\n        <a onClick={(show, type) => this.props.updateModal(true, 'logout')}>logout</a>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <header className=\"Header\">\n        <nav className=\"Header__nav\">\n          <CheckUser\n            contentLogin={this.loginNav()}\n            contentReverse={false}\n          >\n            <Link\n              to=\"/\"\n            >Home</Link>\n            <Link\n              to=\"/signup\"\n            >signup</Link>\n          </CheckUser>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport './Modal.scss';\n\nclass Modal extends Component {\n\n  logout = () => {\n    const email = localStorage.getItem('email');\n\n    axios\n      .post('/api/user/logout', {\n        'email': email\n      },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        })\n      .then(response => {\n        this.props.updateModal(false, '');\n        localStorage.clear()\n        this.props.history.push('/');\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n\n    let modalStyle = 'Modal';\n\n    if (this.props.show === true) {\n      modalStyle += ' show';\n    }\n\n    return (\n      <div className={modalStyle}>\n        <div className=\"Modal__txt\">ログアウトしますか</div>\n        <button onClick={() => this.logout()}>yes</button>\n        <button onClick={(show, type) => this.props.updateModal(false, 'logout')}>no</button>\n      </div>\n    )\n  }\n\n}\n\nexport default withRouter(Modal);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\n// import InputTweet from '../../components/InputTweet/InputTweet';\n// import TweetList from '../../components/TweetList/TweetList';\nimport CheckUser from '../../components/CheckUser/CheckUser';\n\nclass Home extends Component {\n\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"Home__container\">\n          <h1>nyanstagram</h1>\n          <p>登録して友達の写真や動画をチェックしよう</p>\n\n          <CheckUser contentReverse={false}>\n            <Link\n              className=\"Home__link\"\n              to=\"/login\"\n            >ログイン</Link>\n            <p>または</p>\n            <Link\n              className=\"Home__link\"\n              to=\"/signup\"\n            >メールドレスで登録</Link>\n          </CheckUser>\n\n        </div>\n        <CheckUser />\n      </div>\n    )\n  }\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nimport './UserForm.scss';\n\nclass UserForm extends Component {\n\n  state = {\n    email: '',\n    name: '',\n    password: '',\n    errorMsg: {\n      email: '',\n      name: '',\n      password: '',\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.setState({ email: event.target.email.value });\n\n    const formData = new FormData();\n\n    formData.append('email', event.target.email.value);\n    formData.append('name', event.target.name.value);\n    formData.append('password', event.target.password.value);\n\n    axios\n      .post(this.props.apiUrl, formData, {\n        headers: {\n          'content-type': 'multipart/form-data'\n        }\n      })\n      .then(response => {\n        console.log(response);\n        this.exeApiSucess(response);\n      })\n      .catch(error => {\n\n        const errorText = error.response.data.errors;\n\n        let errorMsg = { ...this.state.errorMsg };\n\n        if (errorText.email) {\n          errorMsg.email = errorText.email;\n        }\n        if (errorText.name) {\n          errorMsg.name = errorText.name;\n        }\n        if (errorText.password) {\n          errorMsg.password = errorText.password;\n        }\n\n        this.setState({ errorMsg: errorMsg });\n      });\n  }\n\n  exeApiSucess = (response) => {\n    if (this.props.pageTitle === 'signup') {\n      this.props.history.push('/');\n    }\n\n    if (this.props.pageTitle === 'login') {\n      localStorage.setItem('loginToken', response.data);\n      localStorage.setItem('email', this.state.email);\n      // console.log(response.data);\n      this.props.history.push('/');\n    }\n  }\n\n  getNameParts = () => {\n    if (this.props.pageTitle === 'signup') {\n      return (\n        <div className=\"UserForm__row\">\n          <label className=\"UserForm__label\">user-name</label>\n          <input className=\"UserForm__input\" type=\"text\" name=\"name\" />\n          <span className=\"UserForm__error\">{this.state.errorMsg.name}</span>\n        </div>\n      );\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"UserForm\">\n        <h2 className=\"UserForm__ttl\">{this.props.pageTitle}</h2>\n\n        <form\n          onSubmit={this.handleSubmit}\n          action=\"\"\n          method=\"post\"\n          className=\"UserForm__form\"\n          name=\"signupForm\"\n          rel={this.form}\n        >\n          <div className=\"UserForm__row\">\n            <label className=\"UserForm__label\">email</label>\n            <input className=\"UserForm__input\" type=\"email\" name=\"email\" />\n            <span className=\"UserForm__error\">{this.state.errorMsg.email}</span>\n          </div>\n\n          {this.getNameParts()}\n          \n          <div className=\"UserForm__row\">\n            <label className=\"UserForm__label\">password</label>\n            <input className=\"UserForm__input\" type=\"password\" name=\"password\" />\n            <span className=\"UserForm__error\">{this.state.errorMsg.password}</span>\n          </div>\n          <div className=\"UserForm__row\">\n            <button\n              type=\"submit\"\n              className=\"UserForm__button\"\n            >submit</button>\n          </div>\n        </form>\n\n      </div>\n    )\n  }\n\n}\n\nexport default withRouter(UserForm);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport UserForm from '../../components/UserForm/UserForm';\n\n\nclass Signup extends Component {\n\n  render() {\n    return (\n\n      <UserForm pageTitle=\"signup\" apiUrl=\"/api/signup\" />\n\n    )\n  }\n\n}\n\nexport default withRouter(Signup);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport UserForm from '../../components/UserForm/UserForm';\n\nclass Login extends Component {\n\n  state = {\n    loginToken: ''\n  }\n\n  setToken = (token) => {\n    // this.setState({ loginToken: token });\n    console.log(token.data, 'ok');\n  }\n\n  exeLoginSucess = () => {\n    console.log('success');\n  }\n\n  render() {\n    return (\n\n      <UserForm pageTitle=\"login\" apiUrl=\"/api/login\"\n        exeLoginSucess={() => this.exeLoginSucess()} />\n\n    )\n  }\n\n}\n\nexport default withRouter(Login);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.scss';\n\nimport Header from './components/Header/Header';\nimport Modal from './components/Modal/Modal';\n\n// page\nimport Home from './page/Home/Home';\nimport Signup from './page/Signup/Signup';\nimport Login from './page/Login/Login';\n\nclass App extends Component {\n\n  state = {\n    modal: {\n      show: false,\n      type: ''\n    }\n  }\n\n  updateModal = (show, type) => {\n    this.setState({\n      modal: {\n        show: show,\n        type: type\n      }\n    });\n    console.log('ok');\n  }\n\n  render() {\n    return (\n\n      <BrowserRouter>\n        <div>\n          <Modal\n            show={this.state.modal.show}\n            type={this.state.modal.type}\n            updateModal={(show, type) => this.updateModal(show, type)}\n          />\n          <Header updateModal={(show, type) => this.updateModal(show, type)} />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/signup' component={Signup} />\n            <Route path='/login' component={Login} setToken={(token) => this.setToken(token)} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}