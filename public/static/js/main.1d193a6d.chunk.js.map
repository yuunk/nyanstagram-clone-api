{"version":3,"sources":["components/Header/Header.js","page/Home/Home.js","page/Signup/Signup.js","App.js","serviceWorker.js","index.js"],"names":["header","className","to","Home","Component","Signup","state","email","name","password","errorMsg","handleSubmit","event","preventDefault","console","log","target","formData","FormData","append","value","axios","post","headers","then","response","data","props","history","push","catch","error","errorText","errors","setState","onSubmit","this","action","method","rel","form","type","withRouter","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oXAqBeA,G,YAhBA,WACb,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,eACb,kBAAC,IAAD,CACEC,GAAG,KADL,QAGA,kBAAC,IAAD,CACEA,GAAG,WADL,cCgBOC,G,6KAjBX,OACE,yBAAKF,UAAU,QACb,yBAAKA,UAAU,mBACb,2CACA,uJACA,4BAAQA,UAAU,kBAAlB,4BACA,iDACA,kBAAC,IAAD,CACEC,GAAG,WADL,gE,GAVSE,c,yBCDbC,G,wNAEJC,MAAQ,CACNC,MAAO,GACPC,KAAM,GACNC,SAAU,GACVC,SAAU,CACRH,MAAO,GACPC,KAAM,GACNC,SAAU,K,EAIdE,aAAe,SAACC,GACdA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOR,MAEzB,IAAMS,EAAW,IAAIC,SAErBD,EAASE,OAAO,QAASP,EAAMI,OAAOT,MAAMa,OAC5CH,EAASE,OAAO,OAAQP,EAAMI,OAAOR,KAAKY,OAC1CH,EAASE,OAAO,WAAYP,EAAMI,OAAOP,SAASW,OAElDC,IACGC,KAAK,cAAeL,EAAU,CAC7BM,QAAS,CACP,eAAgB,yBAGnBC,MAAK,SAAAC,GACJX,QAAQC,IAAIU,EAASC,MACrB,EAAKC,MAAMC,QAAQC,KAAK,QAEzBC,OAAM,SAAAC,GACLjB,QAAQC,IAAIgB,EAAMN,UAElB,IAAMO,EAAYD,EAAMN,SAASC,KAAKO,OAElCvB,EAAQ,eAAQ,EAAKJ,MAAMI,UAE3BsB,EAAUzB,QACZG,EAASH,MAAQyB,EAAUzB,OAEzByB,EAAUxB,OACZE,EAASF,KAAOwB,EAAUxB,MAExBwB,EAAUvB,WACZC,EAASD,SAAWuB,EAAUvB,UAGhC,EAAKyB,SAAS,CAAExB,SAAUA,Q,uDAK9B,OACE,yBAAKT,UAAU,UACb,wBAAIA,UAAU,eAAd,WAEA,0BACEkC,SAAUC,KAAKzB,aACf0B,OAAO,cACPC,OAAO,OACPrC,UAAU,aACVO,KAAK,aACL+B,IAAKH,KAAKI,MAEV,yBAAKvC,UAAU,mBACb,2BAAOA,UAAU,qBAAjB,SACA,2BAAOwC,KAAK,QAAQjC,KAAK,UACzB,0BAAMP,UAAU,qBAAqBmC,KAAK9B,MAAMI,SAASH,QAE3D,yBAAKN,UAAU,mBACb,2BAAOA,UAAU,qBAAjB,aACA,2BAAOwC,KAAK,OAAOjC,KAAK,SACxB,0BAAMP,UAAU,qBAAqBmC,KAAK9B,MAAMI,SAASF,OAE3D,yBAAKP,UAAU,mBACb,2BAAOA,UAAU,qBAAjB,YACA,2BAAOwC,KAAK,WAAWjC,KAAK,aAC5B,0BAAMP,UAAU,qBAAqBmC,KAAK9B,MAAMI,SAASD,WAE3D,yBAAKR,UAAU,mBACb,4BACEwC,KAAK,SACLxC,UAAU,sBAFZ,iB,GAnFSG,cAgGNsC,cAAWrC,GCvEXsC,E,uKAhBX,OAEE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,UAAUC,UAAWzC,W,GAZ3BD,aCCE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAM+B,c","file":"static/js/main.1d193a6d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Header.scss';\n\nconst header = () => {\n  return (\n    <header className=\"Header\">\n      <nav className=\"Header__nav\">\n        <Link\n          to=\"/\"\n        >Home</Link>\n        <Link\n          to=\"/signup\"\n        >signup</Link>\n      </nav>\n\n    </header>\n  );\n}\n\nexport default header;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\n// import InputTweet from '../../components/InputTweet/InputTweet';\n// import TweetList from '../../components/TweetList/TweetList';\n\nclass Home extends Component {\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"Home__container\">\n          <h1>nyanstagram</h1>\n          <p>登録して友達の写真や動画をチェックしよう</p>\n          <button className=\"Home__loginBtn\">ログイン</button>\n          <p>または</p>\n          <Link\n            to=\"/signup\"\n          >メールドレスで登録</Link>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nimport './Signup.scss';\nimport './SignupForm.scss';\n\nclass Signup extends Component {\n\n  state = {\n    email: '',\n    name: '',\n    password: '',\n    errorMsg: {\n      email: '',\n      name: '',\n      password: '',\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(event.target.name);\n\n    const formData = new FormData();\n\n    formData.append('email', event.target.email.value);\n    formData.append('name', event.target.name.value);\n    formData.append('password', event.target.password.value);\n\n    axios\n      .post('/api/signup', formData, {\n        headers: {\n          'content-type': 'multipart/form-data'\n        }\n      })\n      .then(response => {\n        console.log(response.data);\n        this.props.history.push('/');\n      })\n      .catch(error => {\n        console.log(error.response);\n\n        const errorText = error.response.data.errors;\n\n        let errorMsg = { ...this.state.errorMsg};\n\n        if (errorText.email) {\n          errorMsg.email = errorText.email;\n        }\n        if (errorText.name) {\n          errorMsg.name = errorText.name;\n        }\n        if (errorText.password) {\n          errorMsg.password = errorText.password;\n        }\n        \n        this.setState({ errorMsg: errorMsg });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"Signup\">\n        <h2 className=\"Signup__ttl\">Sign Up</h2>\n\n        <form\n          onSubmit={this.handleSubmit}\n          action=\"/api/singup\"\n          method=\"post\"\n          className=\"SignupForm\"\n          name=\"signupForm\"\n          rel={this.form}\n        >\n          <div className=\"SignupForm__row\">\n            <label className=\"SignupForm__label\">email</label>\n            <input type=\"email\" name=\"email\" />\n            <span className=\"SignupForm__error\">{this.state.errorMsg.email}</span>\n          </div>\n          <div className=\"SignupForm__row\">\n            <label className=\"SignupForm__label\">user-name</label>\n            <input type=\"text\" name=\"name\" />\n            <span className=\"SignupForm__error\">{this.state.errorMsg.name}</span>\n          </div>\n          <div className=\"SignupForm__row\">\n            <label className=\"SignupForm__label\">password</label>\n            <input type=\"password\" name=\"password\" />\n            <span className=\"SignupForm__error\">{this.state.errorMsg.password}</span>\n          </div>\n          <div className=\"SignupForm__row\">\n            <button\n              type=\"submit\"\n              className=\"SignupForm__button\"\n            >submit</button>\n          </div>\n        </form>\n        \n      </div>\n    )\n  }\n\n}\n\nexport default withRouter(Signup);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.scss';\n\nimport Header from './components/Header/Header';\n\n// page\nimport Home from './page/Home/Home';\nimport Signup from './page/Signup/Signup';\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n\n      <BrowserRouter>\n        <div>\n          <Header />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/signup' component={Signup} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}